#%RAML 0.8
title: TEAM ORGA

version: v1
baseUri: http://teamorga.com/api/{version}
mediaType: application/vnd.teamorga.v1+json
securedBy: [Token Authentication]

documentation:
  - title: Introduction
    content: |
      The documentation describes the **API-endpoints and JSON-formats** which
      enable one to **send request** and **receive responses** from the
      [TEAM ORGA](https://www.teamorga.com) API-endpoints.

      Trigger an API requests on the command line via cURL like that:

      ```sh
      $ curl -X POST http://teamorga.com/api/recurrences \
             -H 'Content-Type: application/json' \
             -H 'Accept: application/vnd.teamorga.v1+json' \
             -H 'Authorization: Token token="s1dHdF-AldFMqKcR7AQgjVNNZOVT5zY5"' \
      ```

      Make sure to **send allways in the header**

      * the accepted media type of the response body
        `Accept: application/vnd.teamorga.v1+json` and
      * a valid token `Authorization: Token token="s1dHdF-AldFMqKcR7AQgjVNNZOVT5zY5"`,

      otherwise you will get an error!

      Specifing the header **media type for the request body**
      `Content-Type: application/json` is only needed for
      **POST-/ PUT-requests**!

      All actions will be executed in the **context of the** `current_user` and
      responses will be based on the **specific current user rights**!

/api_keys:
  displayName: AUTHENTICATION

  description: |
    Here the user manages token authentication of the API, e.g.
    * requests and creates a token or
    * destroys an existing token.

  post:
    securedBy: [null]
    description: |
      Create a new ApiKey.

      Trigger the behaviour via cURL at the command line like that:

      ```sh
      $ curl -X POST http://teamorga.com/api_keys \
             -H 'Content-Type: application/json' \
             -H 'Accept: application/vnd.teamorga.v1+json' \
             -d '{"user": {"email": "fritz@teamorga.com", "password": "foobar"}}' \
      ```
    headers:
      ContentType:
        description: |
          Media type of the **request** body.
        type: string
        example: |
          Content-Type: application/json
      Accept:
        description: |
          Media type of the **response** body.
        type: string
        example: |
          Accept: application/vnd.teamorga.v1+json
    body:
      application/json:
        example: |
          {
            "user":
              {
                "email": "fritz@teamorga.com",
                "password": "foobar"
              }
          }
    responses:
      201:
        description: Created
        body:
          application/json:
            example: |
              {
                "id": 2,
                "birthday": "1983-04-17",
                "phone": "+49 150 123 45 67",
                "email": "Fritz@teamorga.com",
                "shirt_number": 10,
                "access_token": "X5V5_ha5stUrzi6pgjpP1Q",
                "access_until": "2015-08-20T00:00:00+02:00"
              }
      401:
        description: Not authorized

  /{id}:
    uriParameters:
      id:
        description: Account identifier
        type: string
    delete:
      description: Deletes the respective ApiKey.
      headers:
        !include teamorga-default-headers.raml
      responses:
        204:
          description: No Content
        403:
          description: Forbidden

/recurrences:
  displayName: EVENTS
  type:
    readOnlyCollection:
      exampleCollection: !include teamorga-include-recurrences.sample

  /{recurrenceID}:
    type:
      collection-item:
        exampleItem: !include teamorga-include-recurrence-retrieve.sample

    /participations:
      post:
        description: Create a status for the recurrence participation.
        headers:
          !include teamorga-request-headers.raml
        body:
          application/json:
            example: |
              {
                "participation":
                  {
                    "status": "false" or "true"
                  }
              }

      /{participationID}:
        put:
          description: Toggle the status for the recurrence participation.
          headers:
            !include teamorga-request-headers.raml

    /comments:
      type:
        collection:
          exampleCollection: !include teamorga-include-comments.sample
          exampleItem: !include teamorga-include-comment-new.sample

/groups:
  displayName: TEAMS
  type:
    readOnlyCollection:
      exampleCollection: !include teamorga-include-groups.sample

  /{groupID}:
    type:
      collection-item:
        exampleItem: !include teamorga-include-group-retrieve.sample

    /birthdays:
      type:
        readOnlyCollection:
          exampleCollection: !include teamorga-include-users.sample

    /comments:
      type:
        readOnlyCollection:
          exampleCollection: !include teamorga-include-comments.sample

    /recurrences:
      type:
        readOnlyCollection:
          exampleCollection: !include teamorga-include-recurrences.sample

    /users:
      type:
        readOnlyCollection:
          exampleCollection: !include teamorga-include-users.sample

/birthdays:
  displayName: Birthdays
  type:
    readOnlyCollection:
      exampleCollection: !include teamorga-include-users.sample

/comments:
  displayName: Comments
  type:
    readOnlyCollection:
      exampleCollection: !include teamorga-include-comments.sample

  /{commentID}:
    delete:
      headers:
        !include teamorga-default-headers.raml

/users:
  displayName: Profile

  /{userID}:
    type:
      collection-item:
        exampleItem: !include teamorga-include-user-retrieve.sample


schemas:
 - comment: !include teamorga-include-comment.schema

resourceTypes:
  - readOnlyCollection:
      description: |
        Collection of available <<resourcePathName>> in the respective context.
      get:
        description: Get a list of <<resourcePathName>>.
        headers:
          !include teamorga-default-headers.raml
        responses:
          200:
            body:
              application/json:
                example: |
                  <<exampleCollection>>

  - collection:
      description: |
        Collection of available <<resourcePathName>> in the respective context.
      get:
        description: Get a list of <<resourcePathName>>.
        headers:
          !include teamorga-default-headers.raml
        responses:
          200:
            description: OK
            body:
              application/json:
                example: |
                  <<exampleCollection>>
      post:
        description: |
          Add a new <<resourcePathName|!singularize>>.
        headers:
          !include teamorga-request-headers.raml
        body:
          application/json:
            schema: <<resourcePathName|!singularize>>
            example: |
              <<exampleItem>>
        responses:
          200:
            body:
              application/json:
                example: |
                  { "message": "The <<resourcePathName|!singularize>> has been properly entered" }
  - collection-item:
      description: Entity representing a <<resourcePathName|!singularize>>
      get:
        description: |
          Get the <<resourcePathName|!singularize>>
          with <<resourcePathName|!singularize>>Id =
          {<<resourcePathName|!singularize>>Id}
        headers:
          !include teamorga-default-headers.raml
        responses:
          200:
            body:
              application/json:
                example: |
                  <<exampleItem>>
          404:
            body:
              application/json:
                example: |
                  {"message": "<<resourcePathName|!singularize>> not found" }

securitySchemes:
  - Token Authentication:
      description: |
        TEAM ORGA requests token authentication for all API requests.
      type: x-{other}
      describedBy:
        headers:
          Accept:
            description: |
              The media type of the **response** body.
            type: string
            example: |
              Accept: application/vnd.teamorga.v1+json
          Authorization:
            type: string
            description: |
              The valid access token.
            example: |
              Authorization: Token token="s1dHdF-AldFMqKcR7AQgjVNNZOVT5zY5"
        responses:
          401:
            description: |
              Bad or expired token. This can happen if the user or Dropbox
              revoked or expired an access token. To fix, you should re-
              authenticate the user.
          403:
            description: |
              Bad OAuth request (wrong consumer key, bad nonce, expired
              timestamp...). Unfortunately, re-authenticating the user won't help here.
          471:
            body:
              application/json:
                schema: Error
                example: |
                  {
                    "code": "471",
                    "message": "invalid api key"
                  }
